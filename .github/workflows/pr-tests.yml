name: Pull Request Tests

on:
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run BDD tests
      run: npm run test:bdd:ci
      env:
        CI: true
        HEADLESS: true
        
    - name: Run Playwright tests (if any exist)
      run: |
        if find . -name "*.spec.js" -o -name "*.test.js" | head -1 | grep -q .; then
          npx playwright test
        else
          echo "No direct Playwright test files found, skipping..."
        fi
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          test-results/
          playwright-report/
          screenshots/
          videos/
        retention-days: 7
        
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-node-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, '*.js') || contains(github.event.pull_request.changed_files, '*.ts')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting (if configured)
      run: |
        if [ -f .eslintrc* ] || grep -q "eslint" package.json; then
          npm run lint
        else
          echo "No linting configuration found, skipping..."
        fi
      continue-on-error: true